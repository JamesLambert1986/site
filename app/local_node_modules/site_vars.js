var fs = require('fs')
var path = require('path')

var site_vars = {
  detect: function (file,locals) {

    // Set a default site variables
    var site_json = fs.readFileSync('./app/data/system.json', 'utf8')
    locals.site = JSON.parse(site_json);

    // get package data
    let pkg_json = fs.readFileSync('package.json', 'utf8')
    pkg_json = JSON.parse(pkg_json);

    locals.site.version = pkg_json.version;

    // Look at the URL and create the path variable
    locals.path = new Array;
    let temp_path_levels = file.split('/');
    Object.keys(temp_path_levels).forEach(function (key) {
      
      let path_level = temp_path_levels[key];

      if(path_level.endsWith('.md')){
        path_level = path_level.replace('.md','');
      }

      if(path_level != "index"){

        locals.path['level' + (parseInt(key)+1)] = path_level;
      }
    });
    

    // 3. Sub routing  *************************************************************************
    // Check the file path and add extra data or replace data. 
    // i.e. prototype pages will need the main site vars updating, to replace the site nav etc
    if(file.startsWith('kitchen-sink')){
      
      //locals.site = kitchensink.load(locals.site);
    }
    else if(file.startsWith('audit')){

      let summary = fs.readFileSync(path.join(__dirname, '../../audit/summary.json'), 'utf8')
      summary = JSON.parse(summary);
      locals.summary = summary;

      let develop_summary = fs.readFileSync(path.join(__dirname, '../../audit/summary-develop.json'), 'utf8')
      develop_summary = JSON.parse(develop_summary);
      locals.develop_summary = develop_summary;

      let release_summary = fs.readFileSync(path.join(__dirname, '../../audit/summary-release.json'), 'utf8')
      release_summary = JSON.parse(release_summary);
      locals.release_summary = release_summary;

      if(file.startsWith('audit/html')){
        let html_validation = fs.readFileSync(path.join(__dirname, '../../audit/html_validation.json'), 'utf8')
        html_validation = JSON.parse(html_validation);

        let html_accessibility = fs.readFileSync(path.join(__dirname, '../../audit/html_accessibility.json'), 'utf8')
        html_accessibility = JSON.parse(html_accessibility);

        locals.html_validation = html_validation;
        locals.html_accessibility = html_accessibility;
      }
      else if(file.startsWith('audit/css_stats')){
        let css_stats = fs.readFileSync(path.join(__dirname, '../../audit/css_stats.json'), 'utf8')
        css_stats = JSON.parse(css_stats);
        locals.css_stats = css_stats;
      }
      else if(file.startsWith('audit/css_tests')){
        let css_tests = fs.readFileSync(path.join(__dirname, '../../audit/css_unit_tests.json'), 'utf8')
        css_tests = JSON.parse(css_tests);
        locals.css_tests = css_tests.testcase;
      }
      else if(file.startsWith('audit/css_errors')){
        let css_validation = fs.readFileSync(path.join(__dirname, '../../audit/css_validation.json'), 'utf8')
        css_validation = JSON.parse(css_validation);
        locals.css_validation = css_validation;
      }
      else if(file.startsWith('audit/unit_tests')){
        let unit_tests = fs.readFileSync(path.join(__dirname, '../../audit/unit_tests.json'), 'utf8')
        unit_tests = JSON.parse(unit_tests);
        locals.unit_tests = unit_tests;
      }
      else if(file.startsWith('audit/assets')){
        let assets = fs.readFileSync(path.join(__dirname, '../../audit/assets.json'), 'utf8')
        assets = JSON.parse(assets);
        locals.assets = assets;
      }
    }

    return locals;
  }
};

module.exports = site_vars
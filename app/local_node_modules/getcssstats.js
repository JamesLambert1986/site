
var fs = require('fs')
var path = require('path')
var cssstats = require('cssstats')

var getcssstats = {
  load: function (file) { 

    var css = fs.readFileSync(file, 'utf8')
    var stats = cssstats(css);

    var fontfamilies = stats.declarations.getAllFontFamilies()
    var fontsizes = stats.declarations.getAllFontSizes()
    
    fontsizes = [...new Set(fontsizes)];


    function cleancssdata(arr){

      arr = [...new Set(arr)];

      Object.keys(arr).forEach(function (key) {
      
        value = arr[key].replace('var(','').replace(')','').replace(')','').replace('--','').replace(/-/g,'_');
        
        if (value.toLowerCase() == 'inherit' || value.toLowerCase() == 'transparent' || value.toLowerCase() == 'currentcolor' || value.toLowerCase() == 'none' || value.toLowerCase() == 'auto'){
          delete arr[key];
        }
        else if (value.startsWith("_o_") || value.startsWith("_webkit_") ){
          delete arr[key];
        }
        
      });

      arr = arr.filter(function( element ) {
        return element !== undefined;
      });
      
      arr = [...new Set(arr)];

      return arr;
    }

    

    fontfamilies = cleancssdata(fontfamilies);
    stats.fontfamilies = fontfamilies;
    stats.fontfamilies_count = fontfamilies.length;


    
    var colors = stats.declarations.properties.color
    var bgcolor = stats.declarations.properties['background-color']
    var bg = stats.declarations.properties['background']
    colors = colors.concat(bgcolor);
    colors = colors.concat(bg);
    

    colors = cleancssdata(colors);

    
    
    stats.fontsizes = fontsizes;
    stats.fontsizes_count = fontsizes.length;

    stats.colors = colors;
    stats.color_count = colors.length;


    var zindexs = stats.declarations.properties['z-index'];

    zindexs = cleancssdata(zindexs);
    stats.zindexs = zindexs;
    stats.zindexs_count = zindexs.length;

    
    stats.specificitygraph = stats.selectors.getSpecificityGraph();

    var largestspec = Math.max.apply(Math, stats.specificitygraph); // 306
    stats.specificitygraphmax = largestspec;


    stats.rulegraph = stats.rules.size.graph;

    var largestrule = Math.max.apply(Math, stats.rulegraph); // 306
    stats.rulegraphmax = largestrule;


    stats.declarations.fontsize_count = stats.declarations.getUniquePropertyCount('font-size');
    stats.declarations.float_count = stats.declarations.getUniquePropertyCount('float');
    stats.declarations.width_count = stats.declarations.getUniquePropertyCount('width');
    stats.declarations.height_count = stats.declarations.getUniquePropertyCount('height');
    stats.declarations.color_count = stats.declarations.getUniquePropertyCount('color');
    stats.declarations.bgcolor_count = stats.declarations.getUniquePropertyCount('background-color');

    return stats;
  },
  warning: function (warning) { 
      console.log('Warning: ' + warning);
  },
  error: function (error) { 
      console.log('Error: ' + error);
  }
};

module.exports = getcssstats